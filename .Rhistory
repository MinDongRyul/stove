learnRateRangeMin = learnRateRangeMin,
learnRateRangeMax = learnRateRangeMax,
learnRateRangeLevels = learnRateRangeLevels,
mtryRangeMin = mtryRangeMin,
mtryRangeMax = mtryRangeMax,
mtryRangeLevels = mtryRangeLevels,
minNRangeMin = minNRangeMin,
minNRangeMax = minNRangeMax,
minNRangeLevels = minNRangeLevels,
lossReductionRangeMin = lossReductionRangeMin,
lossReductionRangeMax = lossReductionRangeMax,
lossReductionRangeLevels = lossReductionRangeLevels,
metric = metric
)
## models_list에 모델을 추가합니다.
models_list[[paste0(algo,"_",engine)]] <- finalized$finalFittedModel
## user input
for (i in 1:7){
print(models_list[[i]]$.predictions[[1]]$model[1])
}
modelName <- "Random Forest_ranger"
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rp
## evaluation index
evalMet <- goophi::evalMetricsR(models_list, targetVar)
knitr::kable(evalMet)
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rp
## user input
names(models_list)
modelName <- "Random Forest_ranger"
library(goophi)
library(DT)
require(dplyr) # import for loading/preprocessing the sample data
require(MASS)
data("Boston")
attach(Boston)
library(goophi)
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rp
modelName
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rp
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rp
trace(tune::coord_obs_pred, edit = T)
?tune::coord_obs_pred()
trace(tune::coord_obs_pred, edit = T)
?ggplot2::ggproto
trace(tune::coord_obs_pred, edit = T)
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rp
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rp
library(goophi)
library(DT)
require(dplyr) # import for loading/preprocessing the sample data
require(MASS)
data("Boston")
attach(Boston)
library(goophi)
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rp
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rp
## user input
names(models_list)
modelName <- "Random Forest_ranger"
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rp
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rp
## user input
names(models_list)
modelName <- "KNN_kknn"
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rp
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
library(goophi)
library(DT)
require(dplyr) # import for loading/preprocessing the sample data
require(MASS)
data("Boston")
attach(Boston)
library(goophi)
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rgplot <- models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred()
rgplot <- models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred()
rgplot
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5)
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred()
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred()
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted")
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5)
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5)
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred()
?tune::coord_obs_pred()
trace(tune::coord_obs_pred(), edit= T)
trace(tune::coord_obs_pred(), edit = TRUE)
trace(tune::coord_obs_pred, edit = TRUE)
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5)
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
ggplot2::coord_fixed(ratio = 1)
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
ggplot2::theme(aspect.ratio=1)
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred()
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred()
?tune::coord_obs_pred
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred(xlim = max(eval(parse(text = targetVar))), ylim = max(eval(parse(text = targetVar))))
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_fixed() +
tune::coord_obs_pred()
?coord_fixed
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
ggplot2::coord_fixed() +
tune::coord_obs_pred()
r<-max(abs(layer_scales(rgplot)$x$range$range))
?layer_scales
r<-max(abs(ggplot2::layer_scales(rgplot)$x$range$range))
rgplot <- models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5)
rgplot <- models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2)
rgplot <- rgplot + ggplot2::geom_point(alpha = 0.5)
rgplot
rgplot <- models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5)
rgplot <- rgplot + tune::coord_obs_pred()
rgplot
library(DT)
require(dplyr) # import for loading/preprocessing the sample data
require(MASS)
data("Boston")
attach(Boston)
library(goophi)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
cleaned_data <- Boston %>%
dplyr::mutate(chas = as.factor(chas))
knitr::kable(head(cleaned_data, 10))
targetVar <- "crim"
trainSetRatio <- "0.7"
seed = "1234"
split_tmp <- goophi::trainTestSplit(data = cleaned_data,
target = targetVar,
prop = trainSetRatio,
seed = as.numeric(seed))
data_train <- split_tmp$train # train data
data_test <- split_tmp$test # test data
data_split <- split_tmp$dataSplit # whole data with split information
DT::datatable(data_train, options = list(scrollX = TRUE))
formula <- paste0(targetVar, " ~ .") # user 입력 x (1에서 user가 targetVar를 입력했을 때 함께 생성)
imputation <- TRUE
normalization <- TRUE
imputationType = "mean"
normalizationType = "range"
seed = "1234"
rec <- goophi::prepForCV(data = data_train,
formula = formula,
imputationType = imputationType,
normalizationType = normalizationType,
imputation = imputation,
normalization = normalization,
seed = seed)
# 모델 object를 저장할 빈 리스트를 생성합니다.
models_list <- list()
## User input
mode <- "regression"
algo <- "LinearR"
engine <- "glmnet"
penaltyRangeMin = "0.1"
penaltyRangeMax = "20"
penaltyRangeLevels = "5"
mixtureRangeMin = "0.0"
mixtureRangeMax = "1.0"
mixtureRangeLevels = "5"
v <- "2"
metric <- "rmse"
## grid search + cross validation + modeling
finalized <- goophi::linearRegression(algo = algo,
engine = engine,
mode = mode,
trainingData = data_train,
splitedData = data_split,
formula = formula,
rec = rec,
v = 2,
penaltyRangeMin = penaltyRangeMin,
penaltyRangeMax = penaltyRangeMax,
penaltyRangeLevels = penaltyRangeLevels,
mixtureRangeMin = mixtureRangeMin,
mixtureRangeMax = mixtureRangeMax,
mixtureRangeLevels = mixtureRangeLevels,
metric = metric
)
## models_list에 모델을 추가합니다.
models_list[[paste0(algo,"_",engine)]] <- finalized$finalFittedModel
## user input
names(models_list)
modelName <- "KNN_kknn"
## user input
names(models_list)
modelName <- "LinearR_glmnet"
rp <- goophi::regressionPlot(modelName = modelName,
modelsList = models_list,
targetVar = targetVar)
rgplot <- models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5)
rgplot
rgplot <- models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) + tune::coord_obs_pred()
rgplot
?coord_obs_pred
data(solubility_test, package = "modeldata")
library(ggplot2)
p <- ggplot(solubility_test, aes(x = solubility, y = prediction)) +
geom_abline(lty = 2) +
geom_point(alpha = 0.5)
p
p + coord_fixed()
p + coord_obs_pred()
p + tune::coord_obs_pred()
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) + tune::coord_obs_pred()
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
ggplot2::coord_fixed()
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
ggplot2::coord_fixed() +
tune::coord_obs_pred()
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred()
?tune::coord_obs_pred
trace(tune::coord_obs_pred, edit = T)
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
ggplot2::ggproto()
rgplot <- models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5)
ggplot2::ggproto(rgplot)
models_list[[modelName]] %>%
tune::collect_predictions()
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(., ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred))
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred))
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(., ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted")
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(., ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2)
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(., ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5)
models_list[[modelName]] %>%
tune::collect_predictions() %>%
ggplot2::ggplot(., ggplot2::aes(x = eval(parse(text = targetVar)), y = models_list[[modelName]]$.predictions[[1]][1]$.pred)) +
ggplot2::labs(title = "Regression Plot (Truth vs Prediced)",
x = "Truth",
y = "Predicted") +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred()
